/*
 * SPDX-FileCopyrightText: 2017-2023 Sony Semiconductor Solutions Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#ifndef SENSCORD_DEVELOP_CONNECTION_UTILS_H_
#define SENSCORD_DEVELOP_CONNECTION_UTILS_H_

#include "senscord/config.h"
#include "senscord/osal.h"
#include "senscord/connection.h"
#include "senscord/serialize.h"

namespace senscord {
namespace connection {

// Header signature.
const uint8_t kHeaderSignature[] = { 0xDE, 0xAD, 0xC0, 0xDE };

/**
 * @brief Header for connection.
 */
struct Header {
  uint32_t signature;  // kHeaderSignature
  uint32_t total_size;
  // The header is followed by the payload (serialized senscord::Message).
};

/**
 * @brief Find header from socket stream.
 * @param[in] (socket) Socket object.
 * @param[out] (header) Header.
 * @param[in] (timeout_nsec) Timeout relative time. (minus means no timeout)
 * @return Status object.
 */
Status FindHeader(
    osal::OSSocket* socket, Header* header, int64_t timeout_nsec);

/**
 * @brief Fixed size receive function with timeout.
 * @param[in] (socket) Socket object.
 * @param[out] (buffer) Destination buffer.
 * @param[in,out] (recv_size) in: Fixed size to receive, out: Received size.
 * @param[in] (timeout_nsec) Timeout relative time. (minus means no timeout)
 * @return Status object.
 */
Status ReceiveWithTimeout(
    osal::OSSocket* socket, void* buffer, uint32_t* recv_size,
    int64_t timeout_nsec);

/**
 * @brief Serialize message header and message data.
 * @param[in] (msg) The message to serialize.
 * @param[out] (serialized_msg) The serialized message.
 * @return Status object.
 */
Status SerializeMessage(
    const Message& msg, serialize::Buffer* serialized_msg);

/**
 * @brief Deserialize message header and message data.
 * @param[in] (buffer) Pointer to the serialized buffer.
 * @param[in] (size) The size of the buffer.
 * @param[out] (msg) The deserialized message.
 * @return Status object.
 */
Status DeserializeMessage(const void* buffer, size_t size, Message* msg);

/**
 * @brief Releases message data generated by DeserializeMessage function.
 * @param[in] (msg_header) Message header.
 * @param[in] (msg_data) Pointer to message data to release.
 * @return Status object.
 */
Status ReleaseMessage(const MessageHeader& msg_header, void* msg_data);

}   // namespace connection
}   // namespace senscord

#endif  // SENSCORD_DEVELOP_CONNECTION_UTILS_H_
